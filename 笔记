Flask-restful 笔记

### 安装
    pip install flask_restful

### 基本使用
    1. 从flask_result 中导入APi, 来创建一个api对象
    2. 写一个视图函数，让他继承自Resource, 然后在视图函数内
        定义相应的方法, 比如你想要这个视图只能采用post请求，
        那么定义一个post()方法
    3. 使用api.add_resource(resource, *urls, **kwargs) 来添加视图与url
    视图代码如下：
    ''' python
    api = Api(app)

    class LoginView(Resource):
        def post(self, username=None):
        return {"username": "yiouejv"}


    api.add_resource(LoginView, '/login/<username>', '/regist/', endpoint='login')
    '''
    注意事项：
        * 如果你想要返回json数据，那么使用flask_restful, 如果你想要渲染模板，那么还是
          使用render_tempalte的方式
        * url还是和之前的一样，可以传递参数，也和之前有点不一样，可以传递多个url
        * endpoint是用来给url_for反转url的时候指定的，如果不屑endpoint，那么将会使用
          视图函数的名字的小写字母来作为endpoint的值



### restful 标准化返回参数
    1. 定义好接口需要返回的字段字典
        例如:
            resource_fields = {
                'title': fields.String,
                'content': fields.String
            }
    2. 再用marshal_with 装饰器装饰具体的方法
        例如：
            @marshal_with(resource_fields)
            def get(self):
                return {'title': 'xxx'}
        在接口中定义好了需要返回的字段类型后，在函数内即使没有返回，实际上也会返回一个None
    3.  可以直接返回一个示例对象，restful底层会自动去示例对象中取相应的字段值，拼成字典往前端
        返回



### restful 标准话返回参数的复杂结构
    有时候想要在返回的数据格式中，形成比较复杂的结构，那么可以使用一些特殊的字段来实现，比如
    要在一个字段中放置一个列表，那么可以使用fields.List，比如在一个字段下面又是一个字典，那么
    可以使用fields.Nested。
    '''
        class ArticleView(Resource):
            resource_fields = {
                'article_title': fields.String(attribute='title'),  # 重命名属性
                'content': fields.String,
                'author': fields.Nested({
                    'username': fields.String,
                    'email': fields.String,
                }),
                'tags': fields.List(fields.Nested({
                    'id': fields.Integer,
                    'name': fields.String,
                })),
                'read_count': fields.Integer(default=80),  # 设置默认值
            }

            @marshal_with(resource_fields)
            def get(self, article_id):
                article = db_session.query(Article).filter(Article.id==article_id).first()
                return article

    '''


### 在flask_restful 结合蓝图使用
    1. 首先创建一个蓝图，并在主app文件中注册
    2. 在蓝图中创建一个Api对象，参数为第一步创建的蓝图
        例如：
            article_bp = Blueprint('article', __name__)
            api = Api(article_bp)
    3. api就可以正常使用了












